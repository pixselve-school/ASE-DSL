// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/miniMechaCode" 
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

MiniMechaCode returns MiniMechaCode:
	{MiniMechaCode}
	'MiniMechaCode'
	'{'
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
	'}';

Statement returns Statement:
	Math_Impl | BinaryOperator_Impl | RefVariable | Minus | Or | BooleanOperation_Impl | NumberLitteral | Less | DefVariable | Cm | Multi | Loop | Forward | Mm | BooleanLitteral | UnaryOperator_Impl | Equal | Greater | UnitOperator_Impl | DefFunction | Convertion | Not | Rotate | Div | And | FunctionCall | Plus | Expression_Impl;

Expression returns Expression:
	Expression_Impl | Math_Impl | BinaryOperator_Impl | RefVariable | Minus | Or | BooleanOperation_Impl | NumberLitteral | Less | Cm | Multi | Mm | BooleanLitteral | UnaryOperator_Impl | Equal | Greater | UnitOperator_Impl | Convertion | Not | Div | And | FunctionCall | Plus;

Type returns Type:
	Type_Impl | Boolean | Number | Void;


UnitOperator returns UnitOperator:
	UnitOperator_Impl | Cm | Mm;

Math_Impl returns Math:
	'Math'
	'{'
		'right' right=Expression
		'left' left=Expression
	'}';

BinaryOperator_Impl returns BinaryOperator:
	'BinaryOperator'
	'{'
		'right' right=Expression
		'left' left=Expression
	'}';

RefVariable returns RefVariable:
	{RefVariable}
	'RefVariable'
	'{'
		('name' name=String0)?
	'}';

Minus returns Minus:
	'Minus'
	'{'
		'right' right=Expression
		'left' left=Expression
	'}';

Or returns Or:
	'Or'
	'{'
		'right' right=Expression
		'left' left=Expression
	'}';

BooleanOperation_Impl returns BooleanOperation:
	'BooleanOperation'
	'{'
		'right' right=Expression
		'left' left=Expression
	'}';

NumberLitteral returns NumberLitteral:
	{NumberLitteral}
	'NumberLitteral'
	'{'
		('value' value=Double)?
	'}';

Less returns Less:
	'Less'
	'{'
		'right' right=Expression
		'left' left=Expression
	'}';

DefVariable returns DefVariable:
	'DefVariable'
	'{'
		('name' name=String0)?
		'value' value=Expression
		'type' type=Type
	'}';

Cm returns Cm:
	'Cm'
	'{'
		'left' left=Expression
	'}';

Multi returns Multi:
	'Multi'
	'{'
		'right' right=Expression
		'left' left=Expression
	'}';

Loop returns Loop:
	'Loop'
	'{'
		'condition' condition=Expression
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
	'}';

Forward returns Forward:
	'Forward'
	'{'
		'distance' distance=Expression
	'}';

Mm returns Mm:
	'Mm'
	'{'
		'left' left=Expression
	'}';

BooleanLitteral returns BooleanLitteral:
	{BooleanLitteral}
	'BooleanLitteral'
	'{'
		('value' value=Boolean0)?
	'}';

UnaryOperator_Impl returns UnaryOperator:
	'UnaryOperator'
	'{'
		'right' right=Expression
	'}';

Equal returns Equal:
	'Equal'
	'{'
		'right' right=Expression
		'left' left=Expression
	'}';

Greater returns Greater:
	'Greater'
	'{'
		'right' right=Expression
		'left' left=Expression
	'}';

UnitOperator_Impl returns UnitOperator:
	'UnitOperator'
	'{'
		'left' left=Expression
	'}';

DefFunction returns DefFunction:
	{DefFunction}
	'DefFunction'
	'{'
		('name' name=String0)?
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
		('parameters' '{' parameters+=FunctionParameter ( "," parameters+=FunctionParameter)* '}' )?
	'}';

Convertion returns Convertion:
	'Convertion'
	'{'
		'left' left=Expression
		'unit' unit=UnitOperator
	'}';

Not returns Not:
	'Not'
	'{'
		'right' right=Expression
	'}';

Rotate returns Rotate:
	'Rotate'
	'{'
		'angle' angle=Expression
	'}';

Div returns Div:
	'Div'
	'{'
		'right' right=Expression
		'left' left=Expression
	'}';

And returns And:
	'And'
	'{'
		'right' right=Expression
		'left' left=Expression
	'}';

FunctionCall returns FunctionCall:
	{FunctionCall}
	'FunctionCall'
	'{'
		('name' name=String0)?
		('parameters' '{' parameters+=Expression ( "," parameters+=Expression)* '}' )?
	'}';

Plus returns Plus:
	'Plus'
	'{'
		'right' right=Expression
		'left' left=Expression
	'}';

Expression_Impl returns Expression:
	{Expression}
	'Expression'
	;

String0 returns type::String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;

Double returns type::Double:
	'Double' /* TODO: implement this rule and an appropriate IValueConverter */;

Type_Impl returns Type:
	{Type}
	'Type'
	;

Boolean returns Boolean:
	{Boolean}
	'Boolean'
	;

Number returns Number:
	{Number}
	'Number'
	;

Void returns Void:
	{Void}
	'Void'
	;

Boolean0 returns type::Boolean:
	'Boolean' /* TODO: implement this rule and an appropriate IValueConverter */;

FunctionParameter returns FunctionParameter:
	'FunctionParameter'
	'{'
		('name' name=String0)?
		'type' type=Type
	'}';
